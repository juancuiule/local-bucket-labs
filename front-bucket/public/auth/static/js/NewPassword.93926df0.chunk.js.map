{"version":3,"sources":["views/NewPassword.tsx"],"names":["NewPasswordSchema","Yup","shape","password","required","confirmPassword","test","value","this","parent","withRouter","props","appStyles","useAppStyles","useLoader","startLoading","stopLoading","React","useState","setToken","useContext","AuthContext","dispatch","useEffect","search","location","url_token","URLSearchParams","get","history","push","onSubmit","a","className","authCardContainer","container","style","marginTop","variant","titleDisplay","initialValues","validationSchema","values","handleChange","handleBlur","handleSubmit","errors","touched","id","label","type","onChange","onBlur","autoComplete","error","undefined","errorMessage","handleError","color"],"mappings":"+PAmBMA,EAAoBC,MAAaC,MAAM,CAC3CC,SAAUF,MAAaG,SAAS,2BAChCC,gBAAiBJ,MACdG,SAAS,2BACTE,KAAK,kBAAmB,mCAAgC,SAASC,GAChE,OAAOC,KAAKC,OAAON,WAAaI,OAwGvBG,uBApGK,SAACC,GACnB,IAAMC,EAAYC,cADgC,EAEZC,cAFY,KAE1CC,aAF0C,EAE5BC,YACIC,IAAMC,SAAS,KAHS,mBAGpCC,GAHoC,WAK7BF,IAAMG,WAAWC,KAA9BC,SAERL,IAAMM,WAAU,WACd,IAAMC,EAASb,EAAMc,SAASD,OAExBE,EADS,IAAIC,gBAAgBH,GACVI,IAAI,SACX,KAAdF,GAAkC,OAAdA,EACtBf,EAAMkB,QAAQC,KAAK,UAEnBX,EAASO,KAEV,CAACP,EAAUR,EAAMkB,QAASlB,EAAMc,SAASD,SAE5C,IAKMO,EAAQ,uCAAG,uBAAAC,EAAA,wDAAS7B,SAAT,2CAAH,sDAmBd,OACE,yBAAK8B,UAAWrB,EAAUsB,mBACxB,kBAAC,IAAD,CAAMC,WAAS,EAACC,MAAO,CAAEC,UAAW,KAClC,kBAAC,IAAD,CAAYC,QAAQ,KAAKL,UAAWrB,EAAU2B,cAA9C,8BAIF,kBAAC,IAAD,CAAMJ,WAAS,EAACC,MAAO,CAAEC,UAAW,MACpC,kBAAC,IAAD,CACEG,cAjC4B,CAChCrC,SAAU,GACVE,gBAAiB,IAgCb0B,SAAUA,EACVU,iBAAkBzC,IAEjB,gBACC0C,EADD,EACCA,OACAC,EAFD,EAECA,aACAC,EAHD,EAGCA,WACAC,EAJD,EAICA,aACAC,EALD,EAKCA,OACAC,EAND,EAMCA,QAND,OAQC,0BAAMhB,SAAUc,GACd,kBAAC,IAAD,CACEG,GAAG,WACHC,MAAM,sBACNC,KAAK,WACL3C,MAAOmC,EAAOvC,SACdgD,SAAUR,EACVS,OAAQR,EACRS,aAAa,eACbC,WAA2BC,IAApBT,EAAO3C,UAA0B4C,EAAQ5C,SAChDqD,aAAcV,EAAO3C,SACrBsD,aAAW,IAGb,kBAAC,IAAD,CACET,GAAG,kBACHC,MAAM,8BACNC,KAAK,WACL3C,MAAOmC,EAAOrC,gBACd8C,SAAUR,EACVS,OAAQR,EACRS,aAAa,eACbC,WAC6BC,IAA3BT,EAAOzC,iBAAiC0C,EAAQ1C,gBAElDmD,aAAcV,EAAOzC,gBACrBoD,aAAW,IAGb,kBAAC,IAAD,CAAQC,MAAM,UAAUR,KAAK,SAASD,MAAM","file":"static/js/NewPassword.93926df0.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Grid, Typography } from '@material-ui/core'\n\nimport { withRouter, RouteComponentProps } from 'react-router'\n\nimport { Button, TextField, useAppStyles } from '@elgatoylacaja/components'\nimport { Formik } from 'formik'\n\nimport * as Yup from 'yup'\nimport { useLoader } from '@elgatoylacaja/hooks'\n// import { gatoAPI } from '@elgatoylacaja/utils'\nimport { AuthContext } from '../contexts/AuthContext'\n\ninterface FormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst NewPasswordSchema = Yup.object().shape({\n  password: Yup.string().required('Este campo es requerido'),\n  confirmPassword: Yup.string()\n    .required('Este campo es requerido')\n    .test('passwords-match', 'Las contraseñas no coinciden', function(value) {\n      return this.parent.password === value\n    }),\n})\n\nconst NewPassword = (props: RouteComponentProps) => {\n  const appStyles = useAppStyles()\n  const { startLoading, stopLoading } = useLoader()\n  const [token, setToken] = React.useState('')\n\n  const { dispatch } = React.useContext(AuthContext)\n\n  React.useEffect(() => {\n    const search = props.location.search\n    const params = new URLSearchParams(search)\n    const url_token = params.get('token')\n    if (url_token === '' || url_token === null) {\n      props.history.push('/login')\n    } else {\n      setToken(url_token)\n    }\n  }, [setToken, props.history, props.location.search])\n\n  const initialValues: FormValues = {\n    password: '',\n    confirmPassword: '',\n  }\n\n  const onSubmit = async ({ password }: FormValues) => {\n    // startLoading()\n    // try {\n    //   const {\n    //     data: { accessToken },\n    //   } = await gatoAPI.sendNewPassword({\n    //     password,\n    //     token,\n    //   })\n    //   dispatch({ type: 'LOGIN', accessToken })\n    //   stopLoading()\n    // } catch ({ status, error }) {\n    //   stopLoading()\n    //   if (status === 403) {\n    //     // hubo un error con el token\n    //   }\n    // }\n  }\n\n  return (\n    <div className={appStyles.authCardContainer}>\n      <Grid container style={{ marginTop: 10 }}>\n        <Typography variant=\"h1\" className={appStyles.titleDisplay}>\n          Crear nueva contraseña\n        </Typography>\n      </Grid>\n      <Grid container style={{ marginTop: 10 }} />\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={NewPasswordSchema}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          errors,\n          touched,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <TextField\n              id=\"password\"\n              label=\"Nueva contraseña\"\n              type=\"password\"\n              value={values.password}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              autoComplete=\"new-password\"\n              error={errors.password !== undefined && touched.password}\n              errorMessage={errors.password}\n              handleError\n            />\n\n            <TextField\n              id=\"confirmPassword\"\n              label=\"Repetir nueva contraseña\"\n              type=\"password\"\n              value={values.confirmPassword}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              autoComplete=\"new-password\"\n              error={\n                errors.confirmPassword !== undefined && touched.confirmPassword\n              }\n              errorMessage={errors.confirmPassword}\n              handleError\n            />\n\n            <Button color=\"primary\" type=\"submit\" label=\"Crear contraseña\" />\n          </form>\n        )}\n      </Formik>\n    </div>\n  )\n}\n\nexport default withRouter(NewPassword)\n"],"sourceRoot":""}