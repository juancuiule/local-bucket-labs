{"version":3,"sources":["views/Signup.tsx"],"names":["SignupSchema","Yup","shape","email","required","password","confirmPassword","test","value","this","parent","withRouter","props","appStyles","useAppStyles","useLoader","startLoading","stopLoading","dispatch","React","useContext","AuthContext","onSubmit","a","setFieldError","api","register","accessToken","type","status","error","className","hola","authCardContainer","style","marginTop","width","variant","titleDisplay","initialValues","validationSchema","values","handleBlur","handleChange","handleSubmit","errors","touched","id","onChange","onBlur","label","inputProps","inputMode","autoComplete","undefined","errorMessage","handleError","container","color","p","fontSize","textAlign","marginBottom","to"],"mappings":"iQAoBMA,EAAeC,MAAaC,MAAM,CACtCC,MAAOF,MACJE,MAAM,4BACNC,SAAS,2BACZC,SAAUJ,MAAaG,SAAS,2BAChCE,gBAAiBL,MACdG,SAAS,2BACTG,KAAK,kBAAmB,mCAAgC,SAASC,GAChE,OAAOC,KAAKC,OAAOL,WAAaG,OAgJvBG,uBAtIA,SAACC,GACd,IAAMC,EAAYC,cAD2B,EAEPC,cAA9BC,EAFqC,EAErCA,aAAcC,EAFuB,EAEvBA,YAEdC,EAAaC,IAAMC,WAAWC,KAA9BH,SAEFI,EAAQ,uCAAG,yCAAAC,EAAA,6DACbpB,EADa,EACbA,MAAOE,EADM,EACNA,SACPmB,EAFa,EAEbA,cAEFR,IAJe,kBAYiBS,IAAIC,SAAS,CACzCvB,QACAE,aAdW,gBAYLsB,EAZK,EAYLA,YAIRT,EAAS,CAAEU,KAAM,QAASD,gBAC1BV,IAjBa,kDAkBJY,EAlBI,KAkBJA,OAlBI,KAkBIC,MACF,MAAXD,GACFL,EAAc,QAAS,4BAEzBP,IAtBa,0DAAH,wDAgCd,OACE,oCACE,yBAAKc,UAAWlB,EAAUmB,MACxB,4CAEF,yBAAKD,UAAWlB,EAAUoB,mBACxB,kBAAC,IAAD,CAAMC,MAAO,CAAEC,UAAW,GAAIC,MAAO,SACnC,kBAAC,IAAD,CAAYC,QAAQ,KAAKN,UAAWlB,EAAUyB,cAA9C,iBAIF,kBAAC,IAAD,CAAMJ,MAAO,CAAEC,UAAW,GAAIC,MAAO,SACnC,kBAAC,IAAD,CACEG,cAnBwB,CAChCpC,MAAO,GACPE,SAAU,GACVC,gBAAiB,IAiBTgB,SAAUA,EACVkB,iBAAkBxC,IAEjB,gBACCyC,EADD,EACCA,OACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aACAC,EAJD,EAICA,aACAC,EALD,EAKCA,OACAC,EAND,EAMCA,QAND,OAQC,0BAAMxB,SAAUsB,GACd,kBAAC,IAAD,CACEpC,MAAOiC,EAAOtC,MACd4C,GAAG,QACHC,SAAUL,EACVM,OAAQP,EACRQ,MAAM,QACNC,WAAY,CACVC,UAAW,SAEbxB,KAAK,QACLyB,aAAa,QACbvB,WAAwBwB,IAAjBT,EAAO1C,OAAuB2C,EAAQ3C,MAC7CoD,aAAcV,EAAO1C,MACrBqD,aAAW,IAGb,kBAAC,IAAD,CACEhD,MAAOiC,EAAOpC,SACd0C,GAAG,WACHC,SAAUL,EACVM,OAAQP,EACRQ,MAAM,gBACNtB,KAAK,WACLyB,aAAa,eACbvB,WAA2BwB,IAApBT,EAAOxC,UAA0ByC,EAAQzC,SAChDkD,aAAcV,EAAOxC,SACrBmD,aAAW,IAGb,kBAAC,IAAD,CACEhD,MAAOiC,EAAOnC,gBACdyC,GAAG,kBACHC,SAAUL,EACVM,OAAQP,EACRQ,MAAM,wBACNtB,KAAK,WACLyB,aAAa,eACbvB,WAC6BwB,IAA3BT,EAAOvC,iBACPwC,EAAQxC,gBAEViD,aAAcV,EAAOvC,gBACrBkD,aAAW,IAGb,kBAAC,IAAD,CAAMC,WAAS,EAACvB,MAAO,CAAEC,UAAW,SAClC,kBAAC,IAAD,CAAQuB,MAAM,UAAUR,MAAM,eAAetB,KAAK,YAEpD,kBAAC,IAAD,CACEG,UAAWlB,EAAU8C,EACrBzB,MAAO,CACL0B,SAAU,OACVC,UAAW,SACXC,aAAc,SALlB,0BAQoB,IAClB,kBAAC,IAAD,CAAMJ,MAAM,iBAAiBK,GAAG,UAAhC","file":"static/js/Signup.66d819a5.chunk.js","sourcesContent":["import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport Grid from '@material-ui/core/Grid'\n\nimport {\n  Button,\n  TextField,\n  Link,\n  useAppStyles,\n} from '@elgatoylacaja/components'\n\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Formik, FormikHelpers } from 'formik'\n\nimport * as Yup from 'yup'\nimport { useLoader } from '@elgatoylacaja/hooks'\n// import { gatoAPI } from '@elgatoylacaja/utils'\nimport { AuthContext } from '../contexts/AuthContext'\nimport api from '../api'\n\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('No es un email válido')\n    .required('Este campo es requerido'),\n  password: Yup.string().required('Este campo es requerido'),\n  confirmPassword: Yup.string()\n    .required('Este campo es requerido')\n    .test('passwords-match', 'Las contraseñas no coinciden', function(value) {\n      return this.parent.password === value\n    }),\n})\n\ninterface FormValues {\n  email: string\n  password: string\n  confirmPassword: string\n}\n\nconst Signup = (props: RouteComponentProps) => {\n  const appStyles = useAppStyles()\n  const { startLoading, stopLoading } = useLoader()\n\n  const { dispatch } = React.useContext(AuthContext)\n\n  const onSubmit = async (\n    { email, password }: FormValues,\n    { setFieldError }: FormikHelpers<FormValues>\n  ) => {\n    startLoading()\n    try {\n      // const {\n      //   data: { accessToken },\n      // } = await gatoAPI.registerWithEmail({\n      //   email,\n      //   password,\n      // })\n      const { accessToken } = await api.register({\n        email,\n        password,\n      })\n      dispatch({ type: 'LOGIN', accessToken })\n      stopLoading()\n    } catch ({ status, error }) {\n      if (status === 409) {\n        setFieldError('email', 'Este mail ya esta en uso')\n      }\n      stopLoading()\n    }\n  }\n\n  const initialValues: FormValues = {\n    email: '',\n    password: '',\n    confirmPassword: '',\n  }\n\n  return (\n    <>\n      <div className={appStyles.hola}>\n        <span>¡Hola!</span>\n      </div>\n      <div className={appStyles.authCardContainer}>\n        <Grid style={{ marginTop: 10, width: '100%' }}>\n          <Typography variant=\"h1\" className={appStyles.titleDisplay}>\n            Crear cuenta\n          </Typography>\n        </Grid>\n        <Grid style={{ marginTop: 10, width: '100%' }}>\n          <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validationSchema={SignupSchema}\n          >\n            {({\n              values,\n              handleBlur,\n              handleChange,\n              handleSubmit,\n              errors,\n              touched,\n            }) => (\n              <form onSubmit={handleSubmit}>\n                <TextField\n                  value={values.email}\n                  id=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  label=\"Email\"\n                  inputProps={{\n                    inputMode: 'email',\n                  }}\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  error={errors.email !== undefined && touched.email}\n                  errorMessage={errors.email}\n                  handleError\n                />\n\n                <TextField\n                  value={values.password}\n                  id=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  label=\"Contraseña\"\n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                  error={errors.password !== undefined && touched.password}\n                  errorMessage={errors.password}\n                  handleError\n                />\n\n                <TextField\n                  value={values.confirmPassword}\n                  id=\"confirmPassword\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  label=\"Repetir contraseña\"\n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                  error={\n                    errors.confirmPassword !== undefined &&\n                    touched.confirmPassword\n                  }\n                  errorMessage={errors.confirmPassword}\n                  handleError\n                />\n\n                <Grid container style={{ marginTop: '60px' }}>\n                  <Button color=\"primary\" label=\"Crear cuenta\" type=\"submit\" />\n                </Grid>\n                <Typography\n                  className={appStyles.p}\n                  style={{\n                    fontSize: '16px',\n                    textAlign: 'center',\n                    marginBottom: '45px',\n                  }}\n                >\n                  ¿Ya tenés cuenta?{' '}\n                  <Link color=\"var(--primary)\" to=\"/login\">\n                    Ingresar\n                  </Link>\n                </Typography>\n              </form>\n            )}\n          </Formik>\n        </Grid>\n      </div>\n    </>\n  )\n}\n\nexport default withRouter(Signup)\n"],"sourceRoot":""}