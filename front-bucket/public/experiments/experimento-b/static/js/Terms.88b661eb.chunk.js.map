{"version":3,"sources":["views/Terms.tsx"],"names":["withRouter","props","appStyles","useAppStyles","React","useContext","AppContext","dispatch","user","appState","useState","termsChecked","setTermsChecked","undefined","prevAllowsNews","newsChecked","setNewsChecked","submitCount","setSubmitCount","next","a","x","type","route","allowsNews","history","push","variant","className","titleDisplay","text","style","marginTop","link","href","target","rel","container","mobileAlignBottom","checked","onChange","e","_","id","label","unactive","color","onClick","condition","message"],"mappings":"wPAgIeA,uBAjHD,SAACC,GACb,IAAMC,EAAYC,cAD0B,EAKxCC,IAAMC,WAAWC,KAFnBC,EAH0C,EAG1CA,SACYC,EAJ8B,EAI1CC,SAAYD,KAJ8B,EAOJJ,IAAMM,UAAS,GAPX,mBAOrCC,EAPqC,KAOvBC,EAPuB,OAQNR,IAAMM,UAAkB,WAC5D,YAAaG,IAATL,IAC6B,OAAxBA,EAAKM,gBAAiCN,EAAKM,mBAVV,mBAQrCC,EARqC,KAQxBC,EARwB,OAgBNZ,IAAMM,SAAS,GAhBT,mBAgBrCO,EAhBqC,KAgBxBC,EAhBwB,KAiBtCC,EAAI,uCAAG,sBAAAC,EAAA,sDACXF,GAAe,SAAAG,GAAC,OAAIA,EAAI,KACpBV,IAEFJ,EAAS,CAAEe,KAAM,iBAAkBC,MAAO,WAC1ChB,EAAS,CACPe,KAAM,eACNE,WAAYT,IAEdd,EAAMwB,QAAQC,KAAK,cATV,2CAAH,qDAaV,OACE,oCACE,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAW1B,EAAU2B,cAA9C,oCAIA,kBAAC,IAAD,CAAYD,UAAW1B,EAAU4B,KAAMC,MAAO,CAAEC,UAAW,SAA3D,8JAMA,kBAAC,IAAD,CAAYJ,UAAW1B,EAAU4B,KAAMC,MAAO,CAAEC,UAAW,SAA3D,wRAOA,kBAAC,IAAD,CAAYJ,UAAW1B,EAAU4B,KAAMC,MAAO,CAAEC,UAAW,SAA3D,4PAOA,kBAAC,IAAD,CAAYJ,UAAW1B,EAAU4B,KAAMC,MAAO,CAAEC,UAAW,SAA3D,8DACwD,IACtD,uBAAGJ,UAAW1B,EAAU+B,KAAMC,KAAK,iCAAnC,0BAFF,2ZAaA,kBAAC,IAAD,CAAYN,UAAW1B,EAAU4B,KAAMC,MAAO,CAAEC,UAAW,SAA3D,iGAEoB,IAClB,uBACEG,OAAO,SACPP,UAAW1B,EAAU+B,KACrBC,KAAK,gCACLE,IAAI,uBAJN,yBAOK,IAVP,yEAcA,kBAAC,IAAD,CAAMC,WAAS,EAACT,UAAW1B,EAAUoC,mBACnC,kBAAC,IAAD,CACEC,QAAS5B,EACT6B,SAAU,SAACC,EAAGC,GAAJ,OAAU9B,EAAgB6B,EAAEN,OAAOI,UAC7CI,GAAG,oBACHC,MAAM,oHAEE/B,IAATL,GAAsBA,EAAKM,eAAiB,KAC3C,kBAAC,IAAD,CACEyB,QAASxB,EACTyB,SAAU,SAACC,EAAGC,GAAJ,OAAU1B,EAAeyB,EAAEN,OAAOI,UAC5CI,GAAG,gBACHC,MAAM,kGAGV,kBAAC,IAAD,CACEC,UAAWlC,EACXmC,MAAM,UACNF,MAAM,UACNG,QAAS5B,IAEX,kBAAC,IAAD,CACE6B,UAAW/B,EAAc,IAAMN,EAC/BsC,QAAO","file":"static/js/Terms.88b661eb.chunk.js","sourcesContent":["import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport {\n  Button,\n  Checkbox,\n  ErrorMessage,\n  useAppStyles,\n} from '@elgatoylacaja/components'\n\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { AppContext } from '../contexts/AppContext'\n// import { gatoAPI } from '@elgatoylacaja/utils'\n\nconst Terms = (props: RouteComponentProps) => {\n  const appStyles = useAppStyles()\n  const {\n    dispatch,\n    appState: { user },\n  } = React.useContext(AppContext)\n\n  const [termsChecked, setTermsChecked] = React.useState(false)\n  const [newsChecked, setNewsChecked] = React.useState<boolean>(() => {\n    if (user !== undefined) {\n      return user.prevAllowsNews === null ? true : user.prevAllowsNews\n    } else {\n      return false\n    }\n  })\n\n  const [submitCount, setSubmitCount] = React.useState(0)\n  const next = async () => {\n    setSubmitCount(x => x + 1)\n    if (termsChecked) {\n      // await gatoAPI.sendAllowsNews(newsChecked ? 1 : 0, user?.accessToken!)\n      dispatch({ type: 'REGISTER_VISIT', route: '/terms' })\n      dispatch({\n        type: 'ACCEPT_TERMS',\n        allowsNews: newsChecked,\n      })\n      props.history.push('/pregunta')\n    }\n  }\n\n  return (\n    <>\n      <Typography variant=\"h1\" className={appStyles.titleDisplay}>\n        Antes de empezar (experimento B)\n      </Typography>\n\n      <Typography className={appStyles.text} style={{ marginTop: '25px' }}>\n        El objetivo de este experimento es aprender más sobre los factores que\n        afectan la forma en la que reconocemos emociones en los rostros de las\n        personas.\n      </Typography>\n\n      <Typography className={appStyles.text} style={{ marginTop: '25px' }}>\n        Vas a ver 12 fotos de pares de ojos. Para cada uno, elegí y hace click\n        sobre la palabra que mejor describa lo que la persona en la fotografía\n        está pensando o sintiendo. Las definiciones de estas palabras están\n        estandarizadas y se pueden ver durante el experimento.\n      </Typography>\n\n      <Typography className={appStyles.text} style={{ marginTop: '25px' }}>\n        El experimento completo dura unos 5 minutos. Tu participación es\n        absolutamente voluntaria y te podés bajar en cualquier momento. No\n        esperamos ningún tipo de inconveniente o riesgo por participar. Los\n        datos son confidenciales y anónimos.\n      </Typography>\n\n      <Typography className={appStyles.text} style={{ marginTop: '25px' }}>\n        Si tenés cualquier tipo de duda, nos mandás un mail a{' '}\n        <a className={appStyles.link} href=\"mailto:labs@elgatoylacaja.com\">\n          labs@elgatoylacaja.com\n        </a>\n        . Si la pregunta se nos escapa, o querés hacer otro tipo de comentario,\n        tené en mente que podés contactarte con el Comité de Ética en\n        Investigación, Centro de Educación Médica e Investigaciones Clínicas\n        “Norberto Quirno”. Hospital Universitario sede Saavedra, Av. Galván\n        4102. Ciudad de Buenos Aires, (C1425DQK) - República Argentina. Tel:\n        5299-0100, interno 2879.\n      </Typography>\n\n      <Typography className={appStyles.text} style={{ marginTop: '25px' }}>\n        Apenas esté el análisis de estos datos vamos (como siempre) a publicar\n        los resultados en{' '}\n        <a\n          target=\"_blank\"\n          className={appStyles.link}\n          href=\"https://elgatoylacaja.com.ar/\"\n          rel=\"noopener noreferrer\"\n        >\n          www.elgatoylacaja.com\n        </a>{' '}\n        para conversar sobre lo que aprendimos gracias a tu participación.\n      </Typography>\n\n      <Grid container className={appStyles.mobileAlignBottom}>\n        <Checkbox\n          checked={termsChecked}\n          onChange={(e, _) => setTermsChecked(e.target.checked)}\n          id=\"terminos-checkbox\"\n          label=\"Acepto participar de esta encuesta de manera voluntaria y que los datos sean usados para investigación.\"\n        />\n        {user === undefined || user.prevAllowsNews ? null : (\n          <Checkbox\n            checked={newsChecked}\n            onChange={(e, _) => setNewsChecked(e.target.checked)}\n            id=\"news-checkbox\"\n            label=\"Quiero recibir novedades sobre los resultados de estas investigaciones y nuevos experimentos.\"\n          />\n        )}\n        <Button\n          unactive={!termsChecked}\n          color=\"primary\"\n          label=\"Empezar\"\n          onClick={next}\n        />\n        <ErrorMessage\n          condition={submitCount > 0 && !termsChecked}\n          message={`Es necesario aceptar los términos para continuar`}\n        />\n      </Grid>\n    </>\n  )\n}\n\nexport default withRouter(Terms)\n"],"sourceRoot":""}